//
//
//In this document, I will show the step-by-step process of sorting a list  
//using the shell sort algorithm.  
//The unsorted list is: [15, 14, -6, 10, 1, 15, -6, 0]  
//  
//First, we choose a gap value. We typically start with half the list size.  
//The list has 8 elements, so we start with a gap of 4.  
//  
//We will compare and sort elements that are 4 positions apart.  
//Compare 15 with 1. Since 15 is larger, swap them.  
//Compare 14 with 15. No swap needed.  
//Compare -6 with -6. No swap needed.  
//Compare 10 with 0. Since 10 is larger, swap them.  
//The list now looks like this: [1, 14, -6, 0, 15, 15, -6, 10]  
//  
//Next, we reduce the gap to 2 and sort elements that are 2 positions apart.  
//Compare 1 with -6. Since 1 is larger, swap them.  
//Compare 14 with 0. Since 14 is larger, swap them.  
//Compare -6 with 15. No swap needed.  
//Compare 0 with 10. No swap needed.  
//The list now looks like this: [-6, 0, 1, 10, 14, 15, -6, 15]  
//  
//Next, we reduce the gap to 1, which is just insertion sort.  
//Compare 0 with -6. No swap needed.  
//Compare 1 with 0. No swap needed.  
//Compare 10 with 1. No swap needed.  
//Compare 14 with 10. No swap needed.  
//Compare 15 with 14. No swap needed.  
//Compare -6 with 15. Since -6 is smaller, shift 15 to the right.  
//Shift 14 to the right.  
//Shift 10 to the right.  
//Shift 1 to the right.  
//Shift 0 to the right.  
//Insert -6 at position 1.  
//The list now looks like this: [-6, -6, 0, 1, 10, 14, 15, 15]  
//  
//Since there are no more values to process, the final sorted list is:  
//[-6, -6, 0, 1, 10, 14, 15, 15]  
//  
//Since there are no more values to process, the list has fully been sorted  
//with shell sort.  
//
//
